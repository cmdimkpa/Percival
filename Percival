# Percival Interpreter
PercivalVersion =  0.5
# Monty Dimkpa

# -----------------------------------------------------------------
# Percival is a macro programming language for performing ETL tasks
# -----------------------------------------------------------------

import subprocess

def run_shell(cmd):
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
  out, err = p.communicate()
  if err:
      return err
  else:
      try:
          return eval(out)
      except:
          return out

# ensure required libraries

run_shell('python -m pip install requests numpy pandas xlsxwriter xlrd openpyxl html5lib bs4')

import sys
import os
import json
import numpy as np
import pandas as pd
import requests as http
import datetime
from os import listdir
from os.path import isfile
from bs4 import BeautifulSoup

HOME = os.getcwd()
if "\\" in HOME:
    slash = "\\"
else:
    slash = "/"
HOME+=slash

def now() : return datetime.datetime.today()

def logtime() : return str(now())

args = sys.argv;
OP_CODES = [ '@', '<', '?' ]

def sys_macro_write_excel_file(dataObject):
    filename = dataObject[0];
    if slash not in filename:
        filename = HOME+filename;
    mode = dataObject[1].lower();
    if mode == 'a':
        engine = 'openpyxl'
    else:
        engine = 'xlsxwriter'
    writer = pd.ExcelWriter(filename, mode=mode, engine=engine);
    write_sets = dataObject[2];
    for write_set in write_sets:
        df, sheet = write_set;
        df.to_excel(writer, sheet_name=sheet);
    writer.save();

def sys_macro_read_excel_file(dataObject):
    filename = dataObject[0];
    sheetname = dataObject[1];
    _var = dataObject[2];
    if slash not in filename:
        filename = HOME+filename;
    globals()[_var] = pd.read_excel(r'%s' % filename, sheet_name=sheetname, index_col=0);

def sys_macro_read_file(dataObject):
    filename = dataObject[0];
    _bytes_limit = dataObject[1]; # -1 default (return all lines)
    _var = dataObject[2];
    if slash not in filename:
        filename = HOME+filename;
    h = open(filename, 'rb')
    lines = [x.decode() for x in h.readlines(_bytes_limit)];
    h.close()
    globals()[_var] = lines;

def sys_macro_write_file(dataObject):
    filename = dataObject[0];
    datasource = dataObject[1];
    mode = dataObject[2].lower();
    if slash not in filename:
        filename = HOME+filename;
    h = open(filename, '%sb' % mode)
    h.write(b"%s" % datasource);
    h.close()

def sys_macro_delete_file(dataObject):
    filename = dataObject[0];
    if slash not in filename:
        filename = HOME+filename;
    try:
        os.remove(filename)
    except:
        pass

def sys_macro_pcv_dataframe(dataObject):
    datasource = dataObject[0];
    columns = dataObject[1];
    _var = dataObject[2];
    globals()[_var] = pd.DataFrame(np.array(datasource), columns=columns);

def sys_macro_file_list(dataObject):
    dir = dataObject[0];
    _var = dataObject[1];
    filelist = None;
    if dir in ['', '.']:
        dir = HOME
    if slash not in dir:
        dir = HOME + dir
    if dir[-1] != slash:
        dir += slash
    try:
        filelist = [dir+x for x in listdir(dir) if isfile(dir+x)]
    except:
        pass
    globals()[_var] = filelist;

def sys_macro_html_soup(dataObject):
    url = dataObject[0];
    _var = dataObject[1];
    soup = None
    try:
        r = http.get(url);
        soup = BeautifulSoup(r.content, 'html5lib');
    except:
        pass
    globals()[_var] = soup;

def sys_macro_http_request(dataObject):
    try:
        type = dataObject[0].lower();
        if type == 'get':
            url = dataObject[1];
            try:
                _headers = { key : value for (key, value) in dataObject[2] };
            except:
                _headers = {}
            if "Content-Type" not in _headers:
                _headers["Content-Type"] = "application/json";
            _var = dataObject[3];
            resp = http.get(url, headers=_headers);
        if type in ['post', 'put', 'delete', 'patch']:
            url = dataObject[1];
            try:
                payload = { key : value for (key, value) in dataObject[2] };
            except:
                payload = {}
            try:
                _headers = { key : value for (key, value) in dataObject[3] };
            except:
                _headers = {}
            if "Content-Type" not in _headers:
                _headers["Content-Type"] = "application/json";
            _var = dataObject[4];
            resp = eval('http.%s(url, json.dumps(payload), headers=_headers)' % type);
        if str(resp.status_code)[0] != '2':
            # non-2XX response
            print('[Percival %s console @ %s] => HTTPError: [%s] %s' % (PercivalVersion, logtime(), resp.status_code, resp.content))
        try:
            content = resp.json()
        except:
            content = resp.content
        globals()[_var] = content;
        # report
        print('[Percival %s console @ %s] => HTTPSuccess: [%s] %s bytes stored in VAR : %s' % (PercivalVersion, logtime(), resp.status_code, sys.getsizeof(globals()[_var]), _var))
    except Exception as err:
        # handle user error
        print('[Percival %s console @ %s] => HTTPUserError: %s' % (PercivalVersion, logtime(), str(err)))

SYSTEM_MACROS = {
    'READ_FILE' : sys_macro_read_file,
    'WRITE_FILE' : sys_macro_write_file,
    'DELETE_FILE' : sys_macro_delete_file,
    'READ_EXCEL' : sys_macro_read_excel_file,
    'WRITE_EXCEL' : sys_macro_write_excel_file,
    'HTTP_REQUEST' : sys_macro_http_request,
    'PCV_DATAFRAME' : sys_macro_pcv_dataframe,
    'FILE_LIST' : sys_macro_file_list,
    'HTML_SOUP' : sys_macro_html_soup
}

# read input script
if len(args) > 1:
    # read Percival script
    script = args[1];
    if slash not in script:
        script = HOME+script;
    h = open(script, 'rb')
    lines = map(lambda x:x.decode(), h.readlines())
    h.close()
    # to blob
    blob = "::".join(lines);
    # backtick preserve formatting
    backticks = {}; backtick_id = -1; backtick_state = -1; _a = None; _b = None;
    changesets = [];
    j = -1
    for token in blob:
        j += 1
        if token == '`':
            backtick_state+=1
            if backtick_state == 0:
                _a = j;
            else:
                _b = j;
                backtick_state = -1;
                backtick_id+=1
                preformatted = blob[_a+1 : _b];
                preformatted_id = "PREFORMATTED%s" % backtick_id;
                if '{' in preformatted or '}' in preformatted:
                    changesets.append([ preformatted, None ]);
                    # mask reserved tokens in preformatted text
                    preformatted = preformatted.replace('{', '&0');
                    preformatted = preformatted.replace('}', '&1');
                    preformatted = preformatted.replace(';', '&2');
                    preformatted = preformatted.replace('~~', '&3');
                    changesets[-1][1] = preformatted;
                backticks[preformatted_id] = preformatted;
    for changeset in changesets:
        blob = blob.replace(changeset[0], changeset[1]);
    # mask preformatted text
    for preformatted_id in backticks:
        blob = blob.replace('`%s`' % backticks[preformatted_id], preformatted_id);
    # linearize
    lines = blob.split('::');
    # remove comments
    lines_nc = [line for line in lines if "~~" not in line]
    # to blob
    blob = "".join(lines_nc);
    # remove unwanted tokens
    blob = blob.replace(' ','');
    blob = blob.replace('\r','');
    blob = blob.replace('\n','');
    # unmask preformatted text
    for preformatted_id in backticks:
        blob = blob.replace(preformatted_id, backticks[preformatted_id]);
    # read macros
    l=[]; r=[]; j=-1
    for token in blob:
        j+=1
        if token == '{':
            l.append(j)
        if token == '}':
            r.append(j)
    if len(l) != len(r):
        # parity error
        print('[Percival %s console @ %s] => ParityError: check macro boundaries' % (PercivalVersion, logtime()))
        sys.exit()
    # Execute Macros
    for _i in range(len(l)):
        _l = l[_i]; _r = r[_i];
        macro = blob[_l+1 : _r];
        # get operations in this macro
        ops = [x for x in macro.split(';') if x]
        # run operations
        for op in ops:
            # determine op_code
            op_code = None;
            for token in op:
                if token in OP_CODES:
                    op_code = token;
                    break
            if not op_code:
                # no op_code detected, skip operation
                print('[Percival %s console @ %s] => OpCodeError: no op_code detected, skipping' % (PercivalVersion, logtime()))
            else:
                # do operation
                if op_code == '<':
                    # evaluate expression, store in variable
                    _var, _expr = op.split(op_code);
                    # unmask reserved tokens in expression
                    _expr = _expr.replace('&0', '{');
                    _expr = _expr.replace('&1', '}');
                    _expr = _expr.replace('&2', ';');
                    _expr = _expr.replace('&3', '~~');
                    globals()[_var] = eval(_expr);
                if op_code == '?':
                    # evaluate expression, echo
                    _out, _expr = op.split(op_code);
                    # unmask reserved tokens in expression
                    _expr = _expr.replace('&0', '{');
                    _expr = _expr.replace('&1', '}');
                    _expr = _expr.replace('&2', ';');
                    _expr = _expr.replace('&3', '~~');
                    if len(_out) == 0:
                        # console log
                        print(eval(_expr));
                    else:
                        # file log
                        if slash not in _out:
                            _out = HOME+_out;
                        h = open(_out, 'wb')
                        h.write(b"%s" % eval(_expr))
                        h.close()
                if op_code == '@':
                    # run system macro
                    _sysMacro, _dataObject = op.split(op_code);
                    _dataObject = eval(_dataObject);
                    if _sysMacro not in SYSTEM_MACROS:
                        # invalid system macro specified
                        print('[Percival %s console @ %s] => SysMacroError: invalid system macro [%s] specified, skipping' % (PercivalVersion, logtime(), _sysMacro))
                    else:
                        # execute system macro
                        try:
                            SYSTEM_MACROS[_sysMacro](_dataObject);
                        except Exception as err:
                            print('[Percival %s console @ %s] => SysMacroError: %s' % (PercivalVersion, logtime(), str(err)))
else:
    # no input script provided
    print('[Percival %s console @ %s] => ScriptError: no input script provided' % (PercivalVersion, logtime()))

sys.exit()
