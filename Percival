from __future__ import division

# -----------------------------------------------------------------
# Percival is a macro programming language for performing ETL tasks
# -----------------------------------------------------------------

# Percival Macro Interpreter
PercivalVersion =  0.6;
# Author: Monty Dimkpa
# cmdimkpa@gmail.com

import subprocess

def run_shell(cmd):
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
  out, err = p.communicate()
  if err:
      return err
  else:
      try:
          return eval(out)
      except:
          return out

import sys
import os
import json
import datetime
from os import listdir
from os.path import isfile
from math import log10

HOME = os.getcwd()
if "\\" in HOME:
    slash = "\\"
else:
    slash = "/"
HOME+=slash

def now() : return datetime.datetime.today()

def logtime() : return str(now())

def estimate_size(obj):
    size = len(repr(obj));
    order = int(log10(size));
    if 0 < order <= 6:
        # kilobytes
        return '%s%s' % (round(size/1000, 2), 'KB')
    if 6 < order <= 9:
        # megabytes
        return '%s%s' % (round(size/1000000, 2), 'MB')
    if order > 9:
        # gigabytes
        return '%s%s' % (round(size/1000000000, 2), 'GB')

def install(required_libraries):
    return [run_shell('python -m pip install %s' % lib) for lib in required_libraries]

def db_conn_str(engine, config):
    defaults = {
        "psycopg2" : ["psycopg2.connect(user='%s', password='%s', host='%s', port=%s, dbname='%s')", 5432],
        "cx_Oracle" : ["cx_Oracle.connect('%s', '%s', '%s:%s/%s', encoding='UTF-8')", 1521],
        "pymssql" : ["pymssql.connect(user='%s', password='%s', server='%s', port=%s, database='%s')", 1433],
        "pymysql" : ["pymysql.connect(user='%s', password='%s', host='%s', port=%s, database='%s')", 3306],
        "pymongo" : ["MongoClient('mongodb://%s:%s@%s:%s/?authSource=%s')", 27017],
        "redis" : ["redis.Redis(host='%s', port=%s, password='%s', db=%s)", 6379]
    }
    try:
        dbname = config["database"]
    except:
        if engine == 'redis':
            dbname = 0
        else:
            dbname = None
    try:
        user = config["username"]
    except:
        user = None
    try:
        password = config["password"]
    except:
        password = None
    try:
        host = config["host"]
    except:
        host = None
    try:
        port = config["port"]
    except:
        port = defaults[engine][1]
    if engine in ['cx_Oracle', 'psycopg2', 'pymssql', 'pymysql']:
        controls = (user,password,host,port,dbname,)
    elif engine == 'pymongo':
        try:
            authSource = config["database"]
        except:
            authSource = "admin"
        controls = (user,password,host,port,authSource,)
    else:
        controls = (host,port,password,dbname,)
    connector = defaults[engine][0]
    conn_str = connector % controls
    return conn_str

args = sys.argv;
OP_CODES = [ '@', '<', '?', '$' ]
CONTROL_CODES = ['{', '}', ';', '~~', '___', ' ', '\r', '\n']

def mask(expr):
    for i in range(len(CONTROL_CODES)):
        expr = expr.replace(CONTROL_CODES[i], '&%s' % i);
    return expr;

def unmask(expr):
    for i in range(len(CONTROL_CODES)):
        expr = expr.replace('&%s' % i, CONTROL_CODES[i]);
    return expr;

def PCV_EVAL(lines):
    # to blob
    blob = "::".join(lines);
    # backtick preserve formatting
    backticks = {}; backtick_id = -1; backtick_state = -1; _a = None; _b = None;
    changesets = [];
    j = -1
    for token in blob:
        j += 1
        if token == '`':
            backtick_state+=1
            if backtick_state == 0:
                _a = j;
            else:
                _b = j;
                backtick_state = -1;
                backtick_id+=1
                preformatted = blob[_a+1 : _b];
                preformatted_id = "PREFORMATTED%s" % backtick_id;
                if '{' in preformatted or '}' in preformatted:
                    changesets.append([ preformatted, None ]);
                    # mask reserved tokens in preformatted text
                    preformatted = mask(preformatted);
                    changesets[-1][1] = preformatted;
                backticks[preformatted_id] = preformatted;
    for changeset in changesets:
        blob = blob.replace(changeset[0], changeset[1]);
    # mask preformatted text
    for preformatted_id in backticks:
        blob = blob.replace('`%s`' % backticks[preformatted_id], preformatted_id);
    # linearize
    lines = blob.split('::');
    # remove comments
    lines_nc = [line for line in lines if "~~" not in line]
    # to blob
    blob = "".join(lines_nc);
    # remove unwanted tokens
    blob = blob.replace(' ','');
    blob = blob.replace('\r','');
    blob = blob.replace('\n','');
    # unmask preformatted text
    for preformatted_id in backticks:
        blob = blob.replace(preformatted_id, backticks[preformatted_id]);
    blob = blob.replace('::', '');
    # read macros
    l=[]; r=[]; j=-1
    for token in blob:
        j+=1
        if token == '{':
            l.append(j)
        if token == '}':
            r.append(j)
    if len(l) != len(r):
        # parity error
        print('[Percival v%s console @ %s] => ParityError: check macro boundaries' % (PercivalVersion, logtime()))
        sys.exit()
    # Execute Macros
    for _i in range(len(l)):
        _l = l[_i]; _r = r[_i];
        macro = blob[_l+1 : _r];
        # get operations in this macro
        ops = [x for x in macro.split(';') if x]
        # run operations
        for op in ops:
            # determine op_code
            op_code = None;
            for token in op:
                if token in OP_CODES:
                    op_code = token;
                    break
            if not op_code:
                # no op_code detected, skip operation
                print('[Percival v%s console @ %s] => OpCodeError: no op_code detected, skipping' % (PercivalVersion, logtime()))
            else:
                # do operation
                if op_code == '<':
                    # evaluate expression, store in variable
                    comps = op.split(op_code);
                    _var = comps[0];
                    _expr = op_code.join(comps[1:]);
                    # unmask reserved tokens in expression
                    _expr = unmask(_expr);
                    try:
                        globals()[_var] = eval(_expr);
                    except:
                        globals()[_var] = _expr;
                if op_code in ['?', '$']:
                    # evaluate expression, echo
                    comps = op.split(op_code);
                    _out = comps[0];
                    _expr = op_code.join(comps[1:]);
                    # unmask reserved tokens in expression
                    _expr = unmask(_expr);
                    # get result
                    if op_code == '?':
                        try:
                            result = eval(_expr);
                        except:
                            result = _expr
                    if op_code == '$':
                        result = run_shell(_expr);
                    if len(_out) == 0:
                        # console log
                        print(result);
                    else:
                        # file log
                        if slash not in _out:
                            _out = HOME+_out;
                        h = open(_out, 'wb')
                        h.write(b"%s" % result)
                        h.close()
                if op_code == '@':
                    # run system macro
                    comps = op.split(op_code);
                    _sysMacro = comps[0];
                    _dataObject = op_code.join(comps[1:]);
                    _dataObject = eval(_dataObject);
                    if _sysMacro not in SYSTEM_MACROS:
                        # invalid system macro specified
                        print('[Percival v%s console @ %s] => SysMacroError: invalid system macro [%s] specified, skipping' % (PercivalVersion, logtime(), _sysMacro))
                    else:
                        # execute system macro
                        try:
                            SYSTEM_MACROS[_sysMacro](_dataObject);
                        except Exception as err:
                            print('[Percival v%s console @ %s] => SysMacroError: %s' % (PercivalVersion, logtime(), str(err)))

def tunnel(datasource, script):
    # tunnel a datasource into a script
    script = unmask(script);
    globals()['___'] = datasource;
    lines = script.split('\r\n');
    PCV_EVAL(lines);

def sys_macro_write_excel_file(dataObject):
    install([
        "numpy",
        "pandas",
        "xlsxwriter",
        "xlrd",
        "openpyxl"
    ]);
    import numpy as np
    import pandas as pd
    filename = dataObject[0];
    if slash not in filename:
        filename = HOME+filename;
    mode = dataObject[1].lower();
    if mode == 'a':
        engine = 'openpyxl'
    else:
        engine = 'xlsxwriter'
    writer = pd.ExcelWriter(filename, mode=mode, engine=engine);
    write_sets = dataObject[2];
    for write_set in write_sets:
        df, sheet = write_set;
        df.to_excel(writer, sheet_name=sheet);
    writer.save();

def sys_macro_read_excel_file(dataObject):
    install([
        "numpy",
        "pandas",
        "xlsxwriter",
        "xlrd",
        "openpyxl"
    ]);
    import numpy as np
    import pandas as pd
    filename = dataObject[0];
    sheetname = dataObject[1];
    _var = dataObject[2];
    if slash not in filename:
        filename = HOME+filename;
    globals()[_var] = pd.read_excel(r'%s' % filename, sheet_name=sheetname, index_col=0);

def sys_macro_read_file(dataObject):
    filename = dataObject[0];
    _bytes_limit = dataObject[1]; # -1 default (return all lines)
    _var = dataObject[2];
    if slash not in filename:
        filename = HOME+filename;
    h = open(filename, 'rb')
    lines = [x.decode() for x in h.readlines(_bytes_limit)];
    h.close()
    globals()[_var] = lines;

def sys_macro_write_file(dataObject):
    filename = dataObject[0];
    datasource = dataObject[1];
    mode = dataObject[2].lower();
    if slash not in filename:
        filename = HOME+filename;
    h = open(filename, '%sb' % mode)
    h.write(b"%s" % datasource);
    h.close()

def sys_macro_delete_file(dataObject):
    filename = dataObject[0];
    if slash not in filename:
        filename = HOME+filename;
    try:
        os.remove(filename)
    except:
        pass

def sys_macro_pcv_dataframe(dataObject):
    install([
        "numpy",
        "pandas",
        "xlsxwriter",
        "xlrd",
        "openpyxl"
    ]);
    import numpy as np
    import pandas as pd
    datasource = dataObject[0];
    columns = dataObject[1];
    _var = dataObject[2];
    globals()[_var] = pd.DataFrame(np.array(datasource), columns=columns);

def sys_macro_file_list(dataObject):
    dir = dataObject[0];
    _var = dataObject[1];
    filelist = None;
    if dir in ['', '.']:
        dir = HOME
    if slash not in dir:
        dir = HOME + dir
    if dir[-1] != slash:
        dir += slash
    try:
        filelist = [dir+x for x in listdir(dir) if isfile(dir+x)]
    except:
        pass
    globals()[_var] = filelist;

def sys_macro_html_soup(dataObject):
    install([
        "requests",
        "html5lib",
        "bs4"
    ]);
    import requests as http
    from bs4 import BeautifulSoup
    url = dataObject[0];
    _var = dataObject[1];
    soup = None
    try:
        r = http.get(url);
        soup = BeautifulSoup(r.content, 'html5lib');
    except:
        pass
    globals()[_var] = soup;

def sys_macro_write_s3(dataObject):
    install([
        "boto"
    ]);
    import boto
    from boto.s3.key import Key
    try:
        s3conn = globals()['s3conn'];
        myBucket = dataObject[0];
        myKey = dataObject[1];
        datasource = dataObject[2];
        myScript = dataObject[3];
        s3bucket = s3conn.get_bucket(myBucket);
        s3key = Key(s3bucket);
        s3key.key = myKey;
        globals()['s3bucket'] = s3bucket;
        globals()['s3key'] = s3key;
        globals()['s3lastUrl'] = "https://%s/%s/%s" % (s3conn.host, myBucket, myKey);
        s3key.set_contents_from_string(str(datasource));
        # tunnel url into Percival script
        tunnel(globals()['s3lastUrl'], myScript);
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => S3ReadError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_connect_mssql(dataObject):
    install([
        "pymssql"
    ]);
    import pymssql
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['mssql_conn'] = eval(db_conn_str("pymssql", config));
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => MSSQLServerConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_query_mssql(dataObject):
    pass

def sys_macro_stream_mssql(dataObject):
    pass

def sys_macro_connect_oracle(dataObject):
    pass

def sys_macro_query_oracle(dataObject):
    pass

def sys_macro_stream_oracle(dataObject):
    pass

def sys_macro_connect_mysql(dataObject):
    install([
        "pymysql"
    ]);
    import pymysql
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['mysql_conn'] = eval(db_conn_str("pymysql", config));
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => MySQLConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_query_mysql(dataObject):
    pass

def sys_macro_stream_mysql(dataObject):
    pass

def sys_macro_connect_postgresql(dataObject):
    install([
        "psycopg2"
    ]);
    import psycopg2
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['postgresql_conn'] = eval(db_conn_str("psycopg2", config));
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => PostgreSQLConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_query_postgresql(dataObject):
    pass

def sys_macro_stream_postgresql(dataObject):
    pass

def sys_macro_connect_mongodb(dataObject):
    install([
        "pymongo"
    ]);
    from pymongo import MongoClient
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['mongodb_client'] = eval(db_conn_str("pymongo", config));
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => MongoDBConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_query_mongodb(dataObject):
    pass

def sys_macro_stream_mongodb(dataObject):
    pass

def sys_macro_connect_redis(dataObject):
    install([
        "redis"
    ]);
    import redis
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['redis_client'] = eval(db_conn_str("redis", config));
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => RedisConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_query_redis(dataObject):
    pass

def sys_macro_read_pdf(dataObject):
    pass

def sys_macro_configure_mail(dataObject):
    pass

def sys_macro_send_mail(dataObject):
    pass

def sys_macro_read_json(dataObject):
    try:
        filename = dataObject[0];
        if slash not in filename:
            filename = HOME + filename;
        h = open(filename, 'r')
        data = h.read()
        h.close()
        _var = dataObject[1];
        try:
            globals()[_var] = json.loads(data);
        except:
            globals()[_var] = eval(data);
    except:
        pass

def sys_macro_connect_s3(dataObject):
    install([
        "boto"
    ]);
    import boto
    from boto.s3.key import Key
    configVar = dataObject[0];
    try:
        config = globals()[configVar];
        globals()['s3conn'] = boto.connect_s3(
            aws_access_key_id = config['access_key'],
            aws_secret_access_key = config['secret_key'],
            host = 's3.%s.amazonaws.com' % config['region']
        );
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => S3ConnectionError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_read_s3(dataObject):
    install([
        "boto"
    ]);
    import boto
    from boto.s3.key import Key
    try:
        s3conn = globals()['s3conn'];
        myBucket = dataObject[0];
        myKey = dataObject[1];
        myScript = dataObject[2];
        s3bucket = s3conn.get_bucket(myBucket);
        s3key = Key(s3bucket);
        s3key.key = myKey;
        globals()['s3bucket'] = s3bucket;
        globals()['s3key'] = s3key;
        # tunnel file data into Percival script
        tunnel(s3key.get_contents_as_string(), myScript);
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => S3ReadError: %s' % (PercivalVersion, logtime(), str(err)))

def sys_macro_http_request(dataObject):
    install([
        "requests"
    ]);
    import requests as http
    try:
        type = dataObject[0].lower();
        if type == 'get':
            url = dataObject[1];
            try:
                _headers = { key : value for (key, value) in dataObject[2] };
            except:
                _headers = {}
            if "Content-Type" not in _headers:
                _headers["Content-Type"] = "application/json";
            _var = dataObject[3];
            resp = http.get(url, headers=_headers);
        if type in ['post', 'put', 'delete', 'patch']:
            url = dataObject[1];
            try:
                payload = { key : value for (key, value) in dataObject[2] };
            except:
                payload = {}
            try:
                _headers = { key : value for (key, value) in dataObject[3] };
            except:
                _headers = {}
            if "Content-Type" not in _headers:
                _headers["Content-Type"] = "application/json";
            _var = dataObject[4];
            resp = eval('http.%s(url, json.dumps(payload), headers=_headers)' % type);
        if str(resp.status_code)[0] != '2':
            # non-2XX response
            print('[Percival v%s console @ %s] => HTTPError: [%s] %s' % (PercivalVersion, logtime(), resp.status_code, resp.content))
        try:
            content = resp.json()
        except:
            content = resp.content
        globals()[_var] = content;
        # report
        print('[Percival v%s console @ %s] => HTTPSuccess: [%s] %s bytes stored in VAR : %s' % (PercivalVersion, logtime(), resp.status_code, estimate_size(globals()[_var]), _var))
    except Exception as err:
        # handle user error
        print('[Percival v%s console @ %s] => HTTPUserError: %s' % (PercivalVersion, logtime(), str(err)))

SYSTEM_MACROS = {
    'READ_FILE' : sys_macro_read_file,
    'WRITE_FILE' : sys_macro_write_file,
    'DELETE_FILE' : sys_macro_delete_file,
    'READ_EXCEL' : sys_macro_read_excel_file,
    'WRITE_EXCEL' : sys_macro_write_excel_file,
    'HTTP_REQUEST' : sys_macro_http_request,
    'PCV_DATAFRAME' : sys_macro_pcv_dataframe,
    'FILE_LIST' : sys_macro_file_list,
    'HTML_SOUP' : sys_macro_html_soup,
    'CONNECT_S3' : sys_macro_connect_s3,
    'READ_S3' : sys_macro_read_s3,
    'WRITE_S3' : sys_macro_write_s3,
    'CONNECT_MSSQL' : sys_macro_connect_mssql,
    'QUERY_MSSQL' : sys_macro_query_mssql,
    'STREAM_MSSQL' : sys_macro_stream_mssql,
    'CONNECT_ORACLE' : sys_macro_connect_oracle,
    'QUERY_ORACLE' : sys_macro_query_oracle,
    'STREAM_ORACLE' : sys_macro_stream_oracle,
    'CONNECT_MYSQL' : sys_macro_connect_mysql,
    'QUERY_MYSQL' : sys_macro_query_mysql,
    'STREAM_MYSQL' : sys_macro_stream_mysql,
    'CONNECT_POSTGRESQL' : sys_macro_connect_postgresql,
    'QUERY_POSTGRESQL' : sys_macro_query_postgresql,
    'STREAM_POSTGRESQL' : sys_macro_stream_postgresql,
    'CONNECT_MONGODB' : sys_macro_connect_mongodb,
    'QUERY_MONGODB' : sys_macro_query_mongodb,
    'STREAM_MONGODB' : sys_macro_stream_mongodb,
    'CONNECT_REDIS' : sys_macro_connect_redis,
    'QUERY_REDIS' : sys_macro_query_redis,
    'READ_PDF' : sys_macro_read_pdf,
    'CONFIGURE_MAIL' : sys_macro_configure_mail,
    'SEND_MAIL' : sys_macro_send_mail,
    'READ_JSON' : sys_macro_read_json
}

# read input script
if len(args) > 1:
    # read Percival script
    script = args[1];
    if slash not in script:
        script = HOME+script;
    h = open(script, 'rb')
    lines = map(lambda x:x.decode(), h.readlines())
    h.close()
    PCV_EVAL(lines);
else:
    # no input script provided
    print('[Percival v%s console @ %s] => ScriptError: no input script provided' % (PercivalVersion, logtime()))

sys.exit()
